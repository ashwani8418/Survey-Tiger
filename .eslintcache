[{"F:\\survey_tiger\\src\\index.js":"1","F:\\survey_tiger\\src\\App.js":"2","F:\\survey_tiger\\src\\reportWebVitals.js":"3","F:\\survey_tiger\\src\\store\\global-store.js":"4","F:\\survey_tiger\\src\\store\\surveySlice.js":"5","F:\\survey_tiger\\src\\components\\create-survey.js":"6","F:\\survey_tiger\\src\\components\\confirm-survey.js":"7","F:\\survey_tiger\\src\\components\\survey-result.js":"8","F:\\survey_tiger\\src\\components\\survey.js":"9","F:\\survey_tiger\\src\\components\\take-survey.js":"10","F:\\survey_tiger\\src\\store\\responseSlice.js":"11","F:\\survey_tiger\\src\\components\\multi-select.js":"12","F:\\survey_tiger\\src\\components\\single-select.js":"13"},{"size":756,"mtime":1609790470000,"results":"14","hashOfConfig":"15"},{"size":1572,"mtime":1610623962556,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1609790470000,"results":"17","hashOfConfig":"15"},{"size":335,"mtime":1609790470000,"results":"18","hashOfConfig":"15"},{"size":1182,"mtime":1609790470000,"results":"19","hashOfConfig":"15"},{"size":1827,"mtime":1609790470000,"results":"20","hashOfConfig":"15"},{"size":5406,"mtime":1610624315307,"results":"21","hashOfConfig":"15"},{"size":4678,"mtime":1609790470000,"results":"22","hashOfConfig":"15"},{"size":5227,"mtime":1610624787724,"results":"23","hashOfConfig":"15"},{"size":690,"mtime":1609790470000,"results":"24","hashOfConfig":"15"},{"size":315,"mtime":1609790470000,"results":"25","hashOfConfig":"15"},{"size":3106,"mtime":1609790470000,"results":"26","hashOfConfig":"15"},{"size":2540,"mtime":1609790470000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"hch86d",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"F:\\survey_tiger\\src\\index.js",[],["59","60"],"F:\\survey_tiger\\src\\App.js",[],"F:\\survey_tiger\\src\\reportWebVitals.js",[],"F:\\survey_tiger\\src\\store\\global-store.js",[],"F:\\survey_tiger\\src\\store\\surveySlice.js",[],"F:\\survey_tiger\\src\\components\\create-survey.js",[],"F:\\survey_tiger\\src\\components\\confirm-survey.js",["61"],"import React,{useState, useEffect} from 'react';\nimport { Button } from 'reactstrap';\nimport { useSelector } from 'react-redux';\nimport { useParams, useHistory } from 'react-router-dom'\nimport { surveySlice } from '../store/surveySlice';\nimport { useDispatch } from 'react-redux';\nimport '../App.css';\n\nexport default function ConfirmSurvey() {\n    const [answers] = useState([]);\n    const { surveyId } = useParams();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const survey = useSelector((globalStore) => \n        globalStore.surveys.find((s) => s.surveyId === surveyId)\n    );\n\n    const confirmAndPublishSurvey=()=> {\n        dispatch(surveySlice.actions.markPublished({surveyId}));\n        dispatch(surveySlice.actions.addAnswer({surveyId, answers}));\n        history.push(\"/\");\n    };\n    \n\n    const saveAnswer=(e, qId, type)=> {\n        // console.log(\"input value \",e.target.value);\n        let currOption = answers.find((a) => a.qId === String(qId))\n        if(type === 'multiple'){\n            if(e.target.checked){\n                currOption.type = 'multiple';\n                if(e.target.className === 'option1'){\n                    currOption.ans[0] = e.target.value;\n                }else if(e.target.className === 'option2'){\n                    currOption.ans[1] = e.target.value;\n                }\n                else if(e.target.className === 'option3'){\n                    currOption.ans[2] = e.target.value;\n                }\n                else if(e.target.className === 'option4'){\n                    currOption.ans[3] = e.target.value;\n                }\n            }else{\n                if(e.target.className === 'option1'){\n                    currOption.ans[0] = ''\n                }else if(e.target.className === 'option2'){\n                    currOption.ans[1] = ''\n                }\n                else if(e.target.className === 'option3'){\n                    currOption.ans[2] = ''\n                }\n                else if(e.target.className === 'option4'){\n                    currOption.ans[3] = ''\n                }\n            }\n        }else {\n            currOption.type = 'single';\n            if(e.target.className === 'option1'){\n                currOption.ans[0] = e.target.value;\n                currOption.ans[1] = '';\n            }else if(e.target.className === 'option2'){\n                currOption.ans[0] = '';\n                currOption.ans[1] = e.target.value;\n            }\n        }\n        // console.log(\"Save option \",currOption);\n    }\n\n    useEffect(() => {\n        // console.log(survey.questions);\n        survey.questions.map((q, qId) => {\n            let arr = {\n                qId: q.qId,\n                type: '',\n                ans: ['','','','']\n            }\n            answers.push(arr);\n        })\n        // console.log(\"answers \",answers);\n    })\n\n\treturn(\n        <div className=\"all-question-container\">\n        <h5 style={{textAlign:'center', color:'#4caf50'}}>Mark correct option for auto check</h5>\n        {survey.questions.map((q, qId) => (\n            <div className=\"survey-question-container\" key={qId} id={qId} onChange={(e)=> saveAnswer(e, qId+1, q.type)}>\n                <div className=\"question\">{q.question}</div>\n                {q.type ==='single' ? (\n                    <div className=\"single\"style={{margin: \"10px\"}}>\n                        <div className=\"option1\">\n                            <input name={qId} type=\"radio\" className=\"option1\" value={q.options[0]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\n                        </div>\n                        <div className=\"option2\">\n                            <input name={qId} type=\"radio\" className=\"option2\" value={q.options[1]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\n                        </div>\n                    </div>\n                ):(\n                    <div className=\"multiple\" >\n                        <div className=\"option1\">\n                            <input name={qId} type=\"checkbox\" className=\"option1\" value={q.options[0]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\n                        </div>\n                        <div className=\"option2\">\n                            <input name={qId} type=\"checkbox\" className=\"option2\" value={q.options[1]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\n                        </div>\n                        <div className=\"option3\">\n                            <input name={qId} type=\"checkbox\" className=\"option3\" value={q.options[2]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[2]}</label>\n                        </div>\n                        <div className=\"option3\">\n                            <input name={qId} type=\"checkbox\" className=\"option4\" value={q.options[3]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[3]}</label>\n                        </div>\n                    </div> \n                )}\n            </div>\n        ))}\n            <Button onClick={confirmAndPublishSurvey} className=\"survey-main-btn\">Confirm Survey</Button>\n        </div>\n    );\n}\n","F:\\survey_tiger\\src\\components\\survey-result.js",["62","63","64","65"],"import React, {useState, useEffect} from 'react';\nimport { Button } from 'reactstrap';\nimport { useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom'\n\nexport default function SurveyResult() {\n    let [mark, setMark] = useState(0);\n    const history = useHistory();\n    const { surveyId } = useParams();\n    const survey = useSelector((globalStore) => \n        globalStore.surveys.find((s) => s.surveyId === surveyId)\n    );\n    const response = useSelector((globalStore) =>\n        globalStore.responses.find((s) => s.surveyId === surveyId).answers  \n    );\n\n    const result = survey.answers;\n    // console.log(response);\n    \n    useEffect(() => {\n        survey.answers.map((q, qId) =>{\n            response.find((a) => {\n                let flag = true;\n                if((a.qId === q.qId)){\n                    for(let i=0; i<a.ans.length; i++){\n                        if(a.ans[i] !== q.ans[i]){\n                            flag = false;\n                        }\n                        if(a.ans[i].length > 0){\n                            if(q.type === 'multiple'){\n                                document.getElementsByName(qId)[i].checked = 'true';\n                            }else{\n                                // if(a.ans[i] === ''){\n                                    document.getElementsByName(qId)[i].checked = 'true';\n                                // }\n                                // else{\n                                //     document.getElementsByName(qId)[i].checked = 'true';\n                                // }\n                                // break;\n                            }\n                        }\n                    }\n                    if(flag){\n                        document.getElementById(qId).style.backgroundColor = '#4caf5047';\n                        mark++;\n                        setMark(mark);\n                    }else{\n                        document.getElementById(qId).style.backgroundColor = '#ff000024';\n                    }\n                }\n            })\n        })\n    },[]);\n\n    const GotoHome=()=> {\n        history.push('/');\n    }\n\treturn(\n        <div className=\"all-question-container\">\n        <h4 style={{textAlign: 'center'}}>Survey Result {mark} / {survey.questions.length}</h4>\n        {survey.questions.map((q, qId) => (\n            <div className=\"survey-question-container\" id={qId} key={qId}>\n                <div className=\"question\">{q.question}</div>\n                {q.type ==='single' ? (\n                    <div className=\"single\"style={{margin: \"10px\"}}>\n                        <div className=\"option1\">\n                            <input disabled name={qId} type=\"radio\" className=\"option\" value={q.options[0]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\n                        </div>\n                        <div className=\"option2\">\n                            <input disabled name={qId} type=\"radio\" className=\"option\" value={q.options[1]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\n                        </div>\n                    </div>\n                ):(\n                    <div className=\"multiple\" >\n                        <div className=\"option1\">\n                            <input disabled name={qId} type=\"checkbox\" className=\"option1\" value={q.options[0]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\n                        </div>\n                        <div className=\"option2\">\n                            <input disabled name={qId} type=\"checkbox\" className=\"option2\" value={q.options[1]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\n                        </div>\n                        <div className=\"option3\">\n                            <input disabled name={qId} type=\"checkbox\" className=\"option3\" value={q.options[2]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[2]}</label>\n                        </div>\n                        <div className=\"option3\">\n                            <input disabled name={qId} type=\"checkbox\" className=\"option4\" value={q.options[3]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[3]}</label>\n                        </div>\n                    </div> \n                )}\n            </div>\n        ))}\n        <Button onClick={()=> GotoHome()} className=\"survey-main-btn\">Home</Button>\n        </div>\n    );\n}\n","F:\\survey_tiger\\src\\components\\survey.js",["66","67"],"import React,{useState, useEffect} from 'react';\nimport { Button } from 'reactstrap';\nimport { useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom'\nimport { responseSlice } from '../store/responseSlice';\nimport { useDispatch } from 'react-redux';\nimport '../index.css'\n\nexport default function Survey() {\n    const [answers] = useState([]);\n    const { surveyId } = useParams();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const survey = useSelector((globalStore) => \n        globalStore.surveys.find((s) => s.surveyId === surveyId)\n    );\n    const SubmitSurvey=()=> {\n        dispatch(responseSlice.actions.userAnswer({answers, surveyId}))\n        history.push(\"/survey-result/\"+surveyId);\n    };\n\n\n    const saveAnswer=(e, qId, type)=> {\n        // console.log(\"input value \",e.target.value);\n        let currOption = answers.find((a) => a.qId === String(qId))\n        if(type === 'multiple'){\n            currOption.type = 'multiple';\n            if(e.target.checked){\n                if(e.target.className === 'option1'){\n                    currOption.ans[0] = e.target.value;\n                }else if(e.target.className === 'option2'){\n                    currOption.ans[1] = e.target.value;\n                }\n                else if(e.target.className === 'option3'){\n                    currOption.ans[2] = e.target.value;\n                }\n                else if(e.target.className === 'option4'){\n                    currOption.ans[3] = e.target.value;\n                }\n            }else{\n                if(e.target.className === 'option1'){\n                    currOption.ans[0] = ''\n                }else if(e.target.className === 'option2'){\n                    currOption.ans[1] = ''\n                }\n                else if(e.target.className === 'option3'){\n                    currOption.ans[2] = ''\n                }\n                else if(e.target.className === 'option4'){\n                    currOption.ans[3] = ''\n                }\n            }\n        }else {\n            currOption.type = 'single';\n            if(e.target.className === 'option1'){\n                currOption.ans[0] = e.target.value;\n                currOption.ans[1] = '';\n            }else if(e.target.className === 'option2'){\n                currOption.ans[0] = '';\n                currOption.ans[1] = e.target.value;\n            }\n        }\n        // console.log(\"Save option \",currOption);\n    }\n\n    useEffect(() => {\n        // console.log(survey.questions);\n        survey.questions.map((q, qId)=> {\n            let arr = {\n                qId: q.qId,\n                type: '',\n                ans: ['','','','']\n            }\n            answers.push(arr);\n        })\n        // console.log(\"answers \",answers);\n    },[])\n    \n\treturn(\n        <div className=\"all-question-container\">\n        {survey.questions.map((q, qId) => (\n            <div className=\"survey-question-container\" key={qId} onChange={(e)=> saveAnswer(e, qId+1, q.type)}>\n                <div className=\"question\">{q.question}</div>\n                {q.type ==='single' ? (\n                    <div className=\"single\"style={{margin: \"10px\"}}>\n                        <div className=\"option1\">\n                            <input name={qId} type=\"radio\" className=\"option1\" value={q.options[0]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\n                        </div>\n                        <div className=\"option2\">\n                            <input name={qId} type=\"radio\" className=\"option2\" value={q.options[1]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\n                        </div>\n                    </div>\n                ):(\n                    <div className=\"multiple\" >\n                        <div className=\"option1\">\n                            <input name={qId} type=\"checkbox\" className=\"option1\" value={q.options[0]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\n                        </div>\n                        <div className=\"option2\">\n                            <input name={qId} type=\"checkbox\" className=\"option2\" value={q.options[1]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\n                        </div>\n                        <div className=\"option3\">\n                            <input name={qId} type=\"checkbox\" className=\"option3\" value={q.options[2]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[2]}</label>\n                        </div>\n                        <div className=\"option3\">\n                            <input name={qId} type=\"checkbox\" className=\"option4\" value={q.options[3]}></input>\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[3]}</label>\n                        </div>\n                    </div> \n                )}\n            </div>\n        ))}\n        <Button onClick={SubmitSurvey} className=\"survey-main-btn\">Submit Survey</Button>\n        </div>\n    );\n}\n","F:\\survey_tiger\\src\\components\\take-survey.js",[],"F:\\survey_tiger\\src\\store\\responseSlice.js",[],"F:\\survey_tiger\\src\\components\\multi-select.js",[],["68","69"],"F:\\survey_tiger\\src\\components\\single-select.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":70,"column":39,"nodeType":"76","messageId":"77","endLine":70,"endColumn":41},{"ruleId":"78","severity":1,"message":"79","line":17,"column":11,"nodeType":"80","messageId":"81","endLine":17,"endColumn":17},{"ruleId":"74","severity":1,"message":"75","line":21,"column":37,"nodeType":"76","messageId":"77","endLine":21,"endColumn":39},{"ruleId":"74","severity":1,"message":"82","line":22,"column":31,"nodeType":"76","messageId":"77","endLine":22,"endColumn":33},{"ruleId":"83","severity":1,"message":"84","line":53,"column":7,"nodeType":"85","endLine":53,"endColumn":9,"suggestions":"86"},{"ruleId":"74","severity":1,"message":"75","line":68,"column":38,"nodeType":"76","messageId":"77","endLine":68,"endColumn":40},{"ruleId":"83","severity":1,"message":"87","line":77,"column":7,"nodeType":"85","endLine":77,"endColumn":9,"suggestions":"88"},{"ruleId":"70","replacedBy":"89"},{"ruleId":"72","replacedBy":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","Array.prototype.find() expects a return value from arrow function.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'mark', 'response', and 'survey.answers'. Either include them or remove the dependency array. You can also do a functional update 'setMark(m => ...)' if you only need 'mark' in the 'setMark' call.","ArrayExpression",["93"],"React Hook useEffect has missing dependencies: 'answers' and 'survey.questions'. Either include them or remove the dependency array.",["94"],["91"],["92"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [mark, response, survey.answers]",{"range":"99","text":"100"},"Update the dependencies array to be: [answers, survey.questions]",{"range":"101","text":"102"},[2085,2087],"[mark, response, survey.answers]",[2795,2797],"[answers, survey.questions]"]